#######################################################################################################################
#   Background of code
#######################################################################################################################
'''
We attempt to use multiple linear regression models to model the insurance premium prediction problem
'''

#######################################################################################################################
#   Basic configuration steps
#######################################################################################################################

# - import basic python packages
import warnings
import tkinter  # to show plot in Pycharm
warnings.simplefilter(action='ignore', category=FutureWarning)

# - import packages for data manipulations
import numpy as np
import pandas as pd


# - import packages for visualisation
import networkx as nx
import matplotlib.pyplot as plt

# - import packages for NLP
'''
- for the installation of "en_core_web_sm", we use the following command in terminal
- pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.1.0/en_core_web_sm-3.1.0.tar.gz
- the file was then downloaded to this folder: 
- /home/kelvinhwee/.cache/pip/wheels/62/79/40/648305f0a2cd1fdab236bd6764ba467437c5fae2a925768153 
- (look out for the installation completion message in the terminal)
- we copied the zipped file, and extracted the "en_core_web_sm-3.1.0" folder (containing the "config.cfg" file) into the 
'''

import spacy
from spacy.lang.en import English

# - other configurations
pd.set_option("display.max_column", None)
source_filepath = '/home/kelvinhwee/PycharmProjects/sourceFiles'

# - we load the spacy trained pipelines (for English); this is an English pipeline optimized for CPU
nlp = spacy.load('en_core_web_sm-3.1.0')

################################################################################
#   Read CSV data file
################################################################################
'''
- The Enron email dataset contains approximately 500,000 emails generated by employees of the Enron Corporation. 
- It was obtained by the Federal Energy Regulatory Commission during its investigation of Enron's collapse.
- This is the May 7, 2015 Version of dataset, as published at https://www.cs.cmu.edu/~./enron/
- we note that there are only two columes, "file" and "message"
'''

#- reading in of data
emails_df = pd.read_csv(source_filepath + '/emails.csv')
print("We look at a sample of the data: \n", emails_df.head(10))

#- we take a look at some specific instances of "message"
print(emails_df["message"][8]) # "X-From" and "X-To" field corresponds to the "From" and "To", but more explicit
print(emails_df["message"][88]) # "Subject" field seems to be blank
print(emails_df["message"][888]) # email with several recipients (sent to an email group)


'''
if an email contains a preceding email, can we find that email somewhere else?
'''

doc = nlp(emails_df["message"][888])
for tok in doc:
  print(tok.text, "...", tok.dep_)





'''
scattertext === https://github.com/JasonKessler/scattertext
'''